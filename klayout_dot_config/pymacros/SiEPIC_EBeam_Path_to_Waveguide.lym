<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Path to Waveguide</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.waveguides_submenu.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Path_to_Waveguide

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements the creation of waveguides, 
searches for closest component pins and snaps to them, and 
registers this for future heal operations.


Version history:

Lukas Chrostowski           2015/11/15
 - Initial version
 - Selected paths are first snapped to the nearest pins, then converted to ROUND_PATH waveguides

Lukas Chrostowski           2015/11/16
 - fixes for Path_to_Waveguide ensuring it doesn't snap both waveguide ends to the same pin

Lukas Chrostowski           2015/11/17
 - Bend radius dialog, first time.

Lukas Chrostowski           2015/11/18
 - If the GUIDING_SHAPE (a path) is selected, don't do anything. Already a waveguide.
 - removed need for numpy.array

Lukas Chrostowski           2015/11/xx
 - support for either ROUND_PATH or Waveguide_Route, based on global variable

Lukas Chrostowski           2015/12/04
 - menu to choose between ROUND_PATH or Waveguide_Route

Lukas Chrostowski           2015/12/9
 - .index() is a list method; replaced Optical_*.idx with .idx
 - Convert all Si paths to waveguides if nothing is selected.

Lukas Chrostowski           2016/04/10
 - Snap waveguide only to pins with the same orientation; fixes.

Jaspreet &amp; Lukas            2016/04/22
 - warning if one path segment has insufficient length to accommodate the bend radius

Jaspreet Jhoja              2016/04/26
- warning if first and last segments are not manhattan

Lukas Chrostowski           2017/02/14
- Fix for incorrect warning issued for a straight segment waveguide containing coincident points
- remove the addition of 2 coincident vertices in a straight segment waveguide 
  (coincident points not allowed in GDS)
- improvement for 2 vertex path (segment): 
   1) if the two pins are Manhattan, make a straight waveguide.
   2) if the two pins are not Manhattan, insert 2 extra vertices in the middle, 
      and then proceed to snap both ends with two 90ยบ bends.


"""

import pya
from math import *

class WaveguideBuilder():

  def __init__(self):
    import os
  
    ui_file = pya.QFile(os.path.join(os.path.dirname(os.path.realpath(__file__)), "waveguidebuilder.ui"))
    ui_file.open(pya.QIODevice().ReadOnly)
    self.window = pya.QFormBuilder().load(ui_file, pya.Application.instance().main_window())
    ui_file.close
    
    table = self.window.findChild('layerTable')
    table.setColumnCount(3)
    table.setHorizontalHeaderLabels([ "Layer","Width","Offset"])
    table.setColumnWidth(0, 140)
    table.setColumnWidth(1, 50)
    table.setColumnWidth(2, 50)
    
    #Button Bindings
    self.window.findChild('ok').clicked(pathToWaveguide)
    self.window.connect(self.window.findChild('cancel'), pya.__dict__["qt_signal"]("clicked()"), pya.__dict__["qt_slot"]("close()"))
    self.window.findChild('numLayers').valueChanged(self.updateTable)
    self.window.findChild('radioStrip').toggled(self.updateFields)
    self.window.findChild('radioRidge').toggled(self.updateFields)
    self.window.findChild('radioSlot').toggled(self.updateFields)
    self.window.findChild('radioCustom').toggled(self.updateFields)
    self.window.findChild('adiabatic').toggled(self.updateFields)
    self.window.findChild('radioStrip').click()

    lv = pya.Application.instance().main_window().current_view()
    if lv == None:
      raise Exception("No view selected")

    self.layers = []
    itr = lv.begin_layers()
    last = lv.end_layers()
    while True:
      if itr == last:
        break
      else:
        self.layers.append(itr.current().name + " - " + itr.current().source.split('@')[0])
        itr.next()

    self.window.findChild("stripLayer").addItems(self.layers)
    self.window.findChild("ridgeLayer1").addItems(self.layers)
    self.window.findChild("ridgeLayer2").addItems(self.layers)
    self.window.findChild("ridgeLayer2").setCurrentIndex(1)
    self.window.findChild("slotLayer").addItems(self.layers)
    

  def updateTable(self, val):
    table = self.window.findChild("layerTable")
    cur = table.rowCount
    if cur &gt; val:
      for i in range(val, cur):
        table.removeRow(i)
    else:
      for i in range(cur, val):
        table.insertRow(i)
        item = pya.QComboBox(table)
        item.addItems(self.layers)
        table.setCellWidget(i, 0, item)
        item = pya.QLineEdit(table)
        item.setText("0.5")
        table.setCellWidget(i, 1, item)
        item = pya.QLineEdit(table)
        item.setText("0")
        table.setCellWidget(i, 2, item)
        
  def updateFields(self, val):
  
    if self.window.findChild('radioStrip').isChecked():
      self.window.findChild('stripWidth').setEnabled(True)
      self.window.findChild('stripLayer').setEnabled(True)
    else:
      self.window.findChild('stripWidth').setEnabled(False)
      self.window.findChild('stripLayer').setEnabled(False)
      
    if self.window.findChild('radioRidge').isChecked():
      self.window.findChild('ridgeWidth1').setEnabled(True)
      self.window.findChild('ridgeWidth2').setEnabled(True)
      self.window.findChild('ridgeLayer1').setEnabled(True)
      self.window.findChild('ridgeLayer2').setEnabled(True)
    else:
      self.window.findChild('ridgeWidth1').setEnabled(False)
      self.window.findChild('ridgeWidth2').setEnabled(False)
      self.window.findChild('ridgeLayer1').setEnabled(False)
      self.window.findChild('ridgeLayer2').setEnabled(False)
      
    if self.window.findChild('radioSlot').isChecked():
      self.window.findChild('slotWidth1').setEnabled(True)
      self.window.findChild('slotWidth2').setEnabled(True)
      self.window.findChild('slotLayer').setEnabled(True)
    else:
      self.window.findChild('slotWidth1').setEnabled(False)
      self.window.findChild('slotWidth2').setEnabled(False)
      self.window.findChild('slotLayer').setEnabled(False)
      
    if self.window.findChild('radioCustom').isChecked():
      self.window.findChild('numLayers').setEnabled(True)
      self.window.findChild('layerTable').setEnabled(True)
    else:
      self.window.findChild('numLayers').setEnabled(False)
      self.window.findChild('layerTable').setEnabled(False)
      
    if self.window.findChild('adiabatic').isChecked():
      self.window.findChild('bezier').setEnabled(True)
    else:
      self.window.findChild('bezier').setEnabled(False)
      
  def show(self):
    self.window.show()

def pathToWaveguide(val):
  wgb.window.close()
  
    # Configure variables to draw structures in the presently selected cell:
  lv = pya.Application.instance().main_window().current_view()
  if lv == None:
    raise Exception("No view selected")
  # Find the currently selected layout.
  ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
  if ly == None:
    raise Exception("No layout")
  # find the currently selected cell:
  cell = pya.Application.instance().main_window().current_view().active_cellview().cell
  if cell == None:
    raise Exception("No cell")
    
  # fetch the database parameters
  dbu = ly.dbu
  
  waveguideInfo = []
  t_width = 0
  if wgb.window.findChild('radioStrip').isChecked():
    waveguideInfo.append([wgb.window.findChild('stripLayer').currentText, float(wgb.window.findChild('stripWidth').text)/dbu, 0])
    t_width = waveguideInfo[0][1]
  elif wgb.window.findChild('radioRidge').isChecked():
    waveguideInfo.append([wgb.window.findChild('ridgeLayer1').currentText, float(wgb.window.findChild('ridgeWidth1').text)/dbu, 0])
    waveguideInfo.append([wgb.window.findChild('ridgeLayer2').currentText, float(wgb.window.findChild('ridgeWidth2').text)/dbu, 0])
    t_width = waveguideInfo[1][1]
  elif wgb.window.findChild('radioSlot').isChecked():
    w1 = float(wgb.window.findChild('slotWidth1').text)/dbu
    w2 = float(wgb.window.findChild('slotWidth2').text)/dbu
    waveguideInfo.append([wgb.window.findChild('slotLayer').currentText, (w1-w2)/2, (w1+w2)/4])
    waveguideInfo.append([wgb.window.findChild('slotLayer').currentText, (w1-w2)/2,-(w1+w2)/4])
    t_width = w1
  elif wgb.window.findChild('radioCustom').isChecked():
    table = wgb.window.findChild('layerTable')
    for i in range(0, int(wgb.window.findChild('numLayers').value)):
      waveguideInfo.append([table.cellWidget(i,0).currentText, float(table.cellWidget(i,1).text)/dbu, float(table.cellWidget(i,2).text)/dbu])
      i_width = (waveguideInfo[-1][1]/2+waveguideInfo[-1][2])*2
      if t_width &lt; i_width:
        t_width = i_width
  radius = float(wgb.window.findChild('radius').text)/dbu
  adiabatic = wgb.window.findChild('adiabatic').isChecked()
  bezier = float(wgb.window.findChild('bezier').text)
  # Define layers based on PDK_functions:
  LayerSiN = ly.layer(LayerSi)
  LayerTextN = ly.layer(LayerText)
  LayerPinRecN = ly.layer(LayerPinRec)
  LayerDevRecN = ly.layer(LayerDevRec)
  LayerFbrTgtN = ly.layer(LayerFbrTgt)
  LayerErrorN = ly.layer(LayerError)

  # How close must a waveguide be to a pin for it to snap:
  waveguide_snap_dist = 10
  
  print("------------------ Path to Waveguide --------------")
  
  # objects to delete:
  to_delete = []
  
  # new waveguide objects will become selected after they are added.
  new_selection = []
  
  # Find the selected paths
  object_selection = lv.object_selection
  
  if object_selection == []:
    print("Nothing selected.  Automatically selecting paths.")
    # find all shapes, in order to find all paths
    iter1 = cell.begin_shapes_rec(LayerSiN)
    i=0
    found_wg = False
    while not(iter1.at_end()):
      i+=1
      if iter1.shape().is_path():
        # This is a path on the silicon layer, to be converted to a waveguide. 
        n = len(object_selection)
        object_selection.append( pya.ObjectInstPath() )
        object_selection[n].layer = LayerSiN
        object_selection[n].shape = iter1.shape()
        object_selection[n].top = cell.cell_index()
        object_selection[n].cv_index = 0 # o.cv_index, lv.active_cellview()
      iter1.next()
  
    # Select the newly added objects
    lv.object_selection = object_selection
  
  
  # Search the layout for the components:
  print("* calling find_all_components() - DevRec")
  find_all_components(cell, LayerDevRecN, LayerPinRecN, LayerFbrTgtN)
  Waveguide_Type = "Waveguide_Route_General"
  OKa = -1 # for manhattan check
  OKb = -1 # for radius check
  
  for o in object_selection:
    if o.is_cell_inst():
      print("Selected object is a cell, rather than a path.  Please select a path.")
    else:
      print("Selected object is a shape")
      # check if it is a path; check if it is in the present top cell; skip if it is in a subcell.
      if o.shape.is_path() and cell == o.shape.cell:
        c = o.shape.cell
        print(c.basic_name())
        if c.basic_name() == Waveguide_Type:
          # we have a waveguide GUIDING_LAYER selected
          print("Already a waveguide. We will not convert this!")
        else:
          # this is a path.
          
          shape_obj = o.shape
          path_obj = o.shape.path
          num_points = path_obj.num_points()
          points = path_to_points(path_obj)
          
          ####Check if the first and last segments are manhattan
          ##if yes then keep OK = -1
          ##if not then keep it 0
          if OKa == -1:
            if len(points) == 2:
              manhattan_check = ["checked"]
            else:
              manhattan_check = []
            for i in range(len(points)):
              if(i==1 or points[i] == points[-1]):
               if(points[i][0] == points[i-1][0] or points[i][1] == points[i-1][1]):
                manhattan_check.append("checked")
            #if there are two checks in list then it passed the test
            if(len(manhattan_check)==2):
              None
            else:
              warning_window = pya.QMessageBox()
              warning_window.setText("Warning: Waveguide segments (first, last) are not Manhattan (vertical, horizontal).")
              warning_window.setInformativeText("Do you want to Proceed?")
              warning_window.setStandardButtons(pya.QMessageBox.Yes | pya.QMessageBox.Cancel);
              warning_window.setDefaultButton(pya.QMessageBox.Yes)
              response = warning_window.exec_()        
              if(response == pya.QMessageBox.Cancel):
                OKa = 0
                break
              else:
                OKa = 1
  
          #Checks if any segment is less than the radius value
          # only do this the first time (OK not pushed yet)
          if OKb == -1:
            segment_length = [sqrt((points[i][0]- points[i-1][0])**2 + (points[i][1] - points[i-1][1])**2) for i in range(len(points)) if i&gt;0]
            if(all( (each &gt;= radius) or (each == 0) for each in segment_length) == False):
              warning_window = pya.QMessageBox()
              warning_window.setText("Warning: One of the waveguide segments has insufficient length to accommodate the desired bend radius.")
              warning_window.setInformativeText("Do you want to Proceed?")
              warning_window.setStandardButtons(pya.QMessageBox.Yes | pya.QMessageBox.Cancel);
              warning_window.setDefaultButton(pya.QMessageBox.Yes)
              response = warning_window.exec_()        
              if(response == pya.QMessageBox.Cancel):
                OKb = 0
                break
              else:
                OKb = 1
          
          # Waveguide parameters
          wg_type = 0
          bend_pts = 0

          # For both the beginning and end of the path:
          for pin in optical_pins:
            pin.dist = []
          for wg_beginning_end in [ 0, 1 ]:
            # check both the beginning and end of the waveguide.
            if wg_beginning_end == 0:
              path_endpoint = points[0]
              path_endpointb = points[1]
            else:
              path_endpoint = points[len(points)-1]
              path_endpointb = points[len(points)-2]
            # Calculate the distance between every pin and each path endpoint
            for pin in optical_pins:
              # check if pin / path segment are in the same orientation
              if pin.pin_type==1: # only snap to component pins.
                angle_pin_path = angle_segments(pin.points,[path_endpoint, path_endpointb])
              else:
                angle_pin_path = -1
              if angle_pin_path == 0 or abs(angle_pin_path) == 180:
                # this updates "optical_pins" via the "pin" pointer  
                # print( "path endpoint: %s, pin %s: %s" % (path_endpoint, pin.n, [pin.x, pin.y] ) )
                pin.dist.append ( distance_xy ( path_endpoint, [pin.x, pin.y] ) ) 
              else:
                # if this pin isn't in the correct direction, mark it as infinitely far away.
                pin.dist.append ( 1e9 ) 
  
          # Find the closest pin for each path endpoint
          # optical_pins_sorted0[0].dist[0] is the pin distance data sorted in relation to the waveguide beginning:
          optical_pins_sorted0 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[0])
          # optical_pins_sorted1[0].dist[1] is the pin distance data sorted in relation to the waveguide end:
          optical_pins_sorted1 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[1])
          if len(optical_pins_sorted0) &gt; 0:
            # check if both ends of the waveguide want to snap to the same vertex. If so, pick the closest waveguide end.
            go_wg_beginning = True
            go_wg_end = True
            if optical_pins_sorted0[0].idx == optical_pins_sorted1[0].idx:
              # same pin!  find the closest one: 
              if optical_pins_sorted0[0].dist[0] &lt; optical_pins_sorted1[0].dist[1]:
                # Beginning is closest, don't touch the end
                go_wg_end = False
              else:
                # End is closest, don't touch the beginning
                go_wg_beginning = False
            dx = optical_pins_sorted0[0].x - optical_pins_sorted1[0].x
            dy = optical_pins_sorted0[0].y - optical_pins_sorted1[0].y
            if (num_points == 2) &amp; ( (dx != 0) and (dy != 0) ) :
              # insert two mid-points in the path so that:
              #  - to allow for waveguide snapping, move an edge, not just endpoint.
              print("ORIGINAL PTS",points)
              a1 = []
              count =0
              for p in points:
                a1.append (pya.Point(p[0], p[1]))
                count += 1
                if count == 1:
                  # add a point:
                  a1.append(pya.Point((points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2))
                  a1.append(pya.Point((points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2))
              # Update the path
              path_obj = pya.Path(a1, path_obj.width)
              print("updated path (inserted mid-point): %s" % path_obj )              
            if optical_pins_sorted0[0].dist[0] &lt; waveguide_snap_dist and go_wg_beginning:
              # Update the path beginning endpoint to match pin
              points = path_to_points(path_obj)
              # Is this a horizontal or vertical segment; move the whole segment
              if points[0][0] == points[1][0]: 
                # Vertical
                points[1][0] = optical_pins_sorted0[0].x
              if points[0][1] == points[1][1]: 
                # Horizontal
                points[1][1] = optical_pins_sorted0[0].y
              points[0] = [optical_pins_sorted0[0].x, optical_pins_sorted0[0].y]
              a1 = []
              for p in points:
                a1.append (pya.Point(p[0], p[1]))
              # Update the path in the layout
              path_obj = pya.Path(a1, path_obj.width)
              print("updated path (adjusted beginning point): %s" % path_obj )
            optical_pins_sorted1[0] # pin that is closest to the end of path
            if optical_pins_sorted1[0].dist[1] &lt; waveguide_snap_dist and go_wg_end:
              # add check for angle of pins.
              # xxxxx
              
              # Update the path end endpoint to match pin
              points = path_to_points(path_obj)
              # Is this a horizontal or vertical segment; move the whole segment
              if points[len(points)-1][0] == points[len(points)-2][0]: 
                # Vertical
                points[len(points)-2][0] = optical_pins_sorted1[0].x
              if points[len(points)-1][1] == points[len(points)-2][1]: 
                # Horizontal
                points[len(points)-2][1] = optical_pins_sorted1[0].y
              points[len(points)-1] = [optical_pins_sorted1[0].x, optical_pins_sorted1[0].y]
              a1 = []
              for p in points:
                a1.append (pya.Point(p[0], p[1]))
              # Update the path in the layout
              path_obj = pya.Path(a1, path_obj.width)
              print("updated path (adjusted end point): %s" % path_obj )
  
          # only do this for the first waveguide
          if to_delete == []:
            # Record a transaction, to enable "undo"
            lv.transaction("Path to Waveguide")
          
          # Convert the path to a waveguide
          wcell = ly.create_cell("Waveguide_Route_General")
          params = []
          for info in waveguideInfo:
            trans_path = transform_to_offset(path_to_points(path_obj), info[2])
            wg_path = points_to_Dpath(trans_path, info[1])
            params.append([radius-info[2], wg_path, pya.LayerInfo(int(info[0].split(' ')[-1].split('/')[0]), int(info[0].split(' ')[-1].split('/')[1]))])

          createWaveguide(ly, wcell, params, t_width, adiabatic, bezier)
          createWaveguide(ly, wcell, [[radius, points_to_Dpath(path_to_points(path_obj), 3*t_width), LayerDevRec]], 3*t_width, adiabatic, bezier)
          points = path_to_points(path_obj)
          
          # Pins on the waveguide:
          pin = pya.Path([Point(-100, 0), Point(100, 0)], t_width)
                    
          t = Trans(angle_segment([points[0], points[1]])/90, False, Point(points[0][0], points[0][1]))
          wcell.shapes(LayerPinRecN).insert(pin.transformed(t))
          shape = wcell.shapes(LayerPinRecN).insert(Text("pin1", t))
          shape.text_size = 0.4/dbu
          
          t = Trans(angle_segment([points[-1], points[len(points)-2]])/90, False, Point(points[-1][0], points[-1][1]))
          wcell.shapes(LayerPinRecN).insert(pin.transformed(t))
          shape = wcell.shapes(LayerPinRecN).insert(Text ("pin2", t))
          shape.text_size = 0.4/dbu
          
          wcell.set_property('path', points_to_path(path_to_points(path_obj), t_width))
          
          # Leave the newly created waveguide selected, to make it obvious to the user.
          # http://klayout.de/forum/comments.php?DiscussionID=747
          new_selectionN = len(new_selection)
          new_selection.append( pya.ObjectInstPath() )
          new_selection[new_selectionN].top = o.top
          new_selection[new_selectionN].append_path(pya.InstElement.new(cell.insert(pya.CellInstArray(wcell.cell_index(), Trans(0,0)))))
        
          # Mark the path for deletion:
          to_delete.append(shape_obj)
  
  n_deleted = len(to_delete)
  
  if n_deleted == 0:
    if (OKa != 0) &amp; (OKb != 0):
      v = pya.MessageBox.warning("No path selected", "No path selected.\nPlease select a path. \nIt will get converted to a waveguide.", pya.MessageBox.Ok)
  else:
  
    for t in to_delete:
      t.delete()
          
    # Clear the layout view selection, since we deleted some objects (but others may be selected still):
    lv.clear_object_selection()
  
    # Select the newly added objects
    lv.object_selection = new_selection
  
    # Record a transaction, to enable "undo"
    lv.commit()
    
def createWaveguide(ly, cell, params, t_width, adiabatic, bezier):

  from math import sqrt, pi, cos, sin
  dbu = ly.dbu
  LayerDevRecN = ly.layer(LayerInfo(68, 0))

  added = False
  for param in params:
    radius, path, layer = param
    
    points = path_to_Dpoints(path)  # convert from microns to dbu
    
    # check the points to remove any co-linear points
    for i in range(len(points)-2, 0, -1):
      # if point i is colinear with its neighbours, remove it
      if check_point_in_segment(Point(*points[i-1]), Point(*points[i+1]), Point(*points[i])):
        pass
          
    wg_width = path.width
    path = points_to_path(points, wg_width)
    
    for i in range(1,len(points)-1):
      radius = param[0]
      # if point i is colinear with its neighbours, skip it
      if check_point_in_segment(Point(*points[i-1]), Point(*points[i+1]), Point(*points[i])):
        continue
        
      # Place Waveguide_Bend components at each corner:
      # determine rotation: +1 left, -1 right.
      rightvsleft_turn = ( ( angle_segments([points[i-1],points[i]], [points[i],points[i+1]])+90 ) % 360 - 90 ) / 90
      angle = ( angle_segment([points[i-1],points[i]]) ) / 90
      seg_len = distance_xy ( points[i-1],points[i] )/dbu
      if (seg_len &lt; radius) and i==1:  # for the first bend, only 1 segment
        radius = seg_len
      if (seg_len / 2 &lt; radius) and i&gt;1:  # for the middle bends, split the segment into two
        radius = seg_len / 2
      seg_len = distance_xy ( points[i],points[i+1] )/dbu
      if (seg_len  &lt; radius) and i==len(points)-2:
        radius = seg_len 
      if (seg_len / 2 &lt; radius) and i&lt;len(points)-2:
        radius = seg_len / 2
      trans = Trans(angle, True if rightvsleft_turn&lt;0 else False, Point(*points[i]))
      poly = createBentWaveguide(wg_width, radius, adiabatic, bezier)
      cell.shapes(ly.layer(layer)).insert(poly.transform(trans))

    # Place the straight waveguide segments:
    for i in range(0,len(points)-1):
      # find wg_length, and rotation
      angle = ( angle_segment([points[i],points[i+1]]) ) / 90
      p1 = points[i]
      p2 = points[i+1]
      if i == 0:
        p3 = Point((p2[0]+p1[0]-radius*cos(angle*pi/2))/2, (p2[1]+p1[1]-radius*sin(angle*pi/2))/2)
        wg_length = sqrt(pow(p2[0]-p1[0], 2)+pow(p2[1]-p1[1], 2))-radius
      elif i == len(points)-2:
        p3 = Point((p2[0]+p1[0]+radius*cos(angle*pi/2))/2, (p2[1]+p1[1]+radius*sin(angle*pi/2))/2)
        wg_length = sqrt(pow(p2[0]-p1[0], 2)+pow(p2[1]-p1[1], 2))-radius
      else:
        p3 = Point((p2[0]+p1[0])/2, (p2[1]+p1[1])/2)
        wg_length = sqrt(pow(p2[0]-p1[0], 2)+pow(p2[1]-p1[1], 2))-2*radius
      if wg_length &gt; 0:
        trans = Trans(angle, False, p3)
        poly = createStraightWaveguide(wg_length, wg_width)
        cell.shapes(ly.layer(layer)).insert(poly.transform(trans))
        
def createStraightWaveguide(wg_length, wg_width):
  return points_to_path([[-wg_length/2,0], [wg_length/2, 0]],wg_width).simple_polygon()

def createBentWaveguide(width, radius, adiab, bezier):
  from math import pi, cos, sin, sqrt
  if adiab:
    N=500

    L = radius  # effective bend radius / Length of the bend
    diff = 1/N
    xp=[0, (1-bezier)*L, L, L]
    yp=[0, 0, bezier*L, L]
    xA = xp[3] - 3*xp[2] + 3*xp[1] - xp[0]
    xB = 3*xp[2] - 6*xp[1] + 3*xp[0]
    xC = 3*xp[1] - 3*xp[0]
    xD = xp[0]
    yA = yp[3] - 3*yp[2] + 3*yp[1] - yp[0]
    yB = 3*yp[2] - 6*yp[1] + 3*yp[0]
    yC = 3*yp[1] - 3*yp[0]
    yD = yp[0]
    
    orig = Point(0,L)
    coord = [Point(xD, yD)]
    pts = []
    for i in range(1, N):
      t = i*diff
      coord.append(Point(t**3*xA + t**2*xB + t*xC + xD, t**3*yA + t**2*yB + t*yC + yD))
    
    pts.append(Point(0, -L-width/2))
    for i in range(1, N):
      vec = Point(coord[i].x - orig.x, coord[i].y - orig.y)
      vec = vec*((vec.abs()+width/2)/vec.abs())
      pts.append(vec)
    pts.append(Point(L+width/2, 0))
    pts.append(Point(L-width/2, 0))
    for i in range(N-1, 0, -1):
      vec = Point(coord[i].x - orig.x, coord[i].y - orig.y)
      vec = vec*((vec.abs()-width/2)/vec.abs())
      pts.append(vec)
    pts.append(Point(0,-L+width/2))

    for i in range(0, len(pts)):
      pts[i] += Point(-L, L)
    
    return Polygon(pts)
    
  else:
  
    x = -radius
    y = radius
    theta_start = 270
    theta_stop = 360
    circle_fraction = abs(theta_start-theta_stop) / 360.0
    npoints = int(points_per_circle(radius*dbu) * circle_fraction)
    if npoints==0:
      npoints = 1
    da = 2 * pi / npoints * circle_fraction # increment, in radians
    pts = []
    th = theta_start / 360.0 * 2 * pi
    for i in range(0, npoints+1):
      pts.append(Point.from_dpoint(pya.DPoint((x+(radius+width/2)*cos(i*da+th))/1, (y+(radius+width/2)*sin(i*da+th))/1)))
    for i in range(npoints, -1, -1):
      pts.append(Point.from_dpoint(pya.DPoint((x+(radius-width/2)*cos(i*da+th))/1, (y+(radius-width/2)*sin(i*da+th))/1)))
      
    return Polygon(pts)
    </text>
</klayout-macro>
