<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''#################################################################################
SiEPIC installation and initalization

Actions have explicit variable names due to a bug in the KLayout python library

The bug has been reported and will hopefully be resolved so that this file can be changed
to stop clogging up the namespace.

'''#################################################################################

import SiEPIC
import pya, os

menu = pya.Application.instance().main_window().menu()
s1 = "siepic_menu"
if not(menu.is_menu(s1)):
  menu.insert_menu("help_menu",s1,"SiEPIC") 

s2 = "waveguides"
if not(menu.is_menu(s1 + "." + s2)):
  menu.insert_menu(s1 + ".end" , s2, "Waveguides")

s3 = "path_to_wg"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act1 = pya.Action()
  act1.on_triggered(SiEPIC.scripts.waveguide_from_path)
  act1.shortcut = 'W'
  act1.title = "Path to Waveguide"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act1)

s3 = "wg_to_path"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act2 = pya.Action()
  act2.on_triggered(SiEPIC.scripts.waveguide_to_path)
  act2.shortcut = 'Shift+W'
  act2.title = "Waveguide to Path"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act2)
  
s3 = "measure_wg"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act3 = pya.Action()
  act3.on_triggered(SiEPIC.scripts.waveguide_length)
  act3.shortcut = 'Alt+Shift+W'
  act3.title = "Measure Waveguide Length"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act3)

s3 = "measure_wg_diff"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act4 = pya.Action()
  act4.on_triggered(SiEPIC.scripts.waveguide_length_diff)
  act4.shortcut = 'Shift+D'
  act4.title = "Measure Waveguide Length Difference"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act4)
  
s3 = "wg_heal"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act5 = pya.Action()
  act5.on_triggered(SiEPIC.scripts.waveguide_heal)
  act5.shortcut = 'H'
  act5.title = "Heal Waveguides"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act5)

s2 = "layout"
if not(menu.is_menu(s1 + "." + s2)):
  menu.insert_menu(s1 + ".end", s2, "Layout")

s3 = "auto_route"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act6 = pya.Action()
  act6.on_triggered(SiEPIC.scripts.auto_route)
  act6.title = "Automated A* Routing"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act6)
  
s3 = "snap_component"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act7 = pya.Action()
  act7.on_triggered(SiEPIC.scripts.snap_component)
  act7.shortcut = 'Shift+O'
  act7.title = "Snap Selected Component to Nearest Pins"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act7)  

s2 = "exlayout"
if not(menu.is_menu(s1 + "." + s2)):
  menu.insert_menu(s1 +".end", s2,"Example Layouts")
  
s3 = "dbl_bus_ring_res"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act8 = pya.Action()
  act8.on_triggered(SiEPIC.examples.dbl_bus_ring_res)
  act8.title = "Double Bus Ring Resonator"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act8)

s3 = "mzi"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act9 = pya.Action()
  act9.on_triggered(SiEPIC.examples.mzi)
  act9.title = "12 TE Mach-Zehner Interferometers - Jaspreet Jhoja"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act9)

s2 = "verification"
if not(menu.is_menu(s1 + "." + s2)):
  menu.insert_menu(s1 + ".end", s2, "Verification")

s3 = "compute_area"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act10 = pya.Action()
  act10.on_triggered(SiEPIC.scripts.compute_area)
  act10.title = "Compute Area of Selected Layer"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act10)
  
s3 = "calibreDRC"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act11 = pya.Action()
  act11.on_triggered(SiEPIC.scripts.calibreDRC)
  act11.title = "Remote Calibre DRC"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act11)

s3 = "auto_coord_extract"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act12 = pya.Action()
  act12.on_triggered(SiEPIC.scripts.auto_coord_extract)
  act12.title = "Automated Coordinate Extraction"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act12)

s3 = "layout_check"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act13 = pya.Action()
  act13.on_triggered(SiEPIC.scripts.layout_check)
  act13.shortcut = 'V'
  act13.title = "Verification: Graphical Layout Check"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act13)
  
s3 = "text_netlist_check"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act14 = pya.Action()
  act14.on_triggered(SiEPIC.scripts.text_netlist_check)
  act14.shortcut = 'N'
  act14.title = "Verification: Text and Netlist Generation"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act14)

s2 = "simulation"
if not(menu.is_menu(s1 + "." + s2)):
  menu.insert_menu(s1 + ".end", s2, "Simulation")
  
s3 = "mc_sim"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act15 = pya.Action()
  act15.on_triggered(SiEPIC.lumerical.interconnect.monte_carlo)
  act15.title = "Monte Carlo Simulation"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act13)

s3 = "launch_lumerical"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act16 = pya.Action()
  act16.on_triggered(SiEPIC.lumerical.interconnect.launch)
  act16.title = "Launch Lumerical Interconnect"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act16)
  
s3 = "update_netlist"
if not(menu.is_menu(s1 + "." + s2 + "." + s3)):
  act17 = pya.Action()
  act17.on_triggered(SiEPIC.lumerical.interconnect.update_netlist)
  act17.title = "Update Netlist in Lumerical Inteconnect"
  menu.insert_item(s1 + "." + s2 + ".end" , s3, act17)

path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "SiEPIC", "files", "INTERCONNECT_icon.png")

act18 = pya.Action()
act18.title = "Circuit \nSimulation"
act18.on_triggered(SiEPIC.lumerical.interconnect.launch)
act18.icon = path
menu.insert_item("@toolbar.end", "cir_sim", act18)

act19 = pya.Action()
act19.title = "INTERCONNECT Monte Carlo Simulations"
act19.on_triggered(SiEPIC.lumerical.interconnect.monte_carlo)
act19.icon = path
menu.insert_item("@toolbar.cir_sim.end", "mc_sim", act19)

act20 = pya.Action()
act20.title = "INTERCONNECT Circuit Simulation"
act20.on_triggered(SiEPIC.lumerical.interconnect.launch)
act20.icon = path
menu.insert_item("@toolbar.cir_sim.end", "launch_lumerical", act20)

act21 = pya.Action()
act21.title = "INTERCONNECT Update Netlist"
act21.on_triggered(SiEPIC.lumerical.interconnect.update_netlist)
act21.icon = path
menu.insert_item("@toolbar.cir_sim.end", "update_netlist", act21)

config = pya.Application.instance().get_config('key-bindings')
mapping = dict(item.split(":") for item in config.split(";"))

mapping['edit_menu.clear_all_rulers'] = "'Ctrl+K'"
mapping['edit_menu.copy'] = "'Ctrl+C'"
mapping['edit_menu.cut'] = "'Ctrl+X'"
mapping['edit_menu.paste'] = "'Ctrl+V'"
mapping['edit_menu.redo'] = "'Ctrl+Y'"
mapping['edit_menu.undo'] = "'Ctrl+Z'"
mapping['edit_menu.delete'] = "'Del'"
#  mapping['edit_menu.duplicate'] = "'Ctrl+B'"
mapping['edit_menu.mode_menu.move'] = "'M'"
mapping['edit_menu.mode_menu.ruler'] = "'R'"
mapping['edit_menu.mode_menu.select'] = "'S'"
mapping['edit_menu.mode_menu.box'] = "'B'"
mapping['edit_menu.mode_menu.instance'] = "'I'"
mapping['edit_menu.mode_menu.partial'] = "'L'"
mapping['edit_menu.mode_menu.path'] = "'P'"
mapping['edit_menu.mode_menu.polygon'] = "'G'"
mapping['edit_menu.mode_menu.text'] = "'X'"
mapping['edit_menu.select_menu.select_all'] = "'Ctrl+A'"
mapping['edit_menu.show_properties'] = "'Q'"
mapping['edit_menu.edit_options'] = "'E'"
mapping['edit_menu.selection_menu.change_layer'] = "'Shift+L'"
mapping['edit_menu.selection_menu.sel_flip_x'] = "'Shift+H'"
mapping['edit_menu.selection_menu.sel_flip_y'] = "'Shift+V'"
mapping['edit_menu.selection_menu.sel_move'] = "'Ctrl+M'"
#  mapping['edit_menu.selection_menu.size'] = "'Z'"
#  mapping['edit_menu.selection_menu.tap'] = "''"

mapping['file_menu.new_layout'] = "'Ctrl+N'"
mapping['file_menu.close'] = "'Ctrl+W'"
mapping['file_menu.open_new_panel'] = "'Ctrl+O'"
mapping['file_menu.open_same_panel'] = "'Ctrl+Shift+O'"
mapping['file_menu.save'] = "'Ctrl+S'"
mapping['file_menu.save_as'] = "'Ctrl+Shift+S'"
mapping['file_menu.screenshot'] = "'F12'"
#  mapping['file_menu.setup'] = "'F4'"

mapping['macros_menu.macro_development'] = "'F5'"

mapping['zoom_menu.max_hier'] = "'Shift+F'"
mapping['zoom_menu.select_current_cell'] = "'Shift+S'" # Display &gt; Show as new top
mapping['zoom_menu.zoom_fit'] = "'F'"
mapping['zoom_menu.zoom_fit_sel'] = "'Shift+F2'"
mapping['zoom_menu.zoom_in'] = "'Return'"
mapping['zoom_menu.zoom_out'] = "'Shift+Return'"

# turn the hash back into a config string
config = ''.join('{}:{};'.format(key, val) for key, val in sorted(mapping.items()))[:-1]
pya.Application.instance().set_config('key-bindings', config)
pya.Application.instance().set_config('edit-connect-angle-mode','ortho')
pya.Application.instance().set_config('edit-inst-angle','0')
pya.Application.instance().set_config('edit-move-angle-mode','diagonal')
pya.Application.instance().set_config('edit-snap-to-objects','true')
pya.Application.instance().set_config('grid-micron','0.01')
pya.Application.instance().set_config('edit-top-level-selection','true')
pya.Application.instance().set_config('inst-color','#ffcdcd')
pya.Application.instance().set_config('text-font','3')
pya.Application.instance().set_config('guiding-shape-line-width','0')
pya.Application.instance().set_config('rdb-marker-color','#ff0000')
pya.Application.instance().set_config('rdb-marker-line-width','8')
pya.Application.instance().set_config('default-layer-properties', os.path.join(pya.Application.instance().application_data_path(),'libraries','klayout_Layers_EBeam.lyp'))
          
obs = pya.Observer()
obs.on_signal(SiEPIC.utils.load_technology)
pya.Application.instance().main_window().add_current_view_observer(obs)
pya.Application.instance().main_window().add_new_view_observer(obs)

# Determine whether we have Python 2 or Python 3
import sys
if sys.version_info[0] == 3:
    # Python 3 code
    pass
elif sys.version_info[0] == 2:
    # Python 2 code
    pass</text>
</klayout-macro>
